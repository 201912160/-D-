BookingMapper.java

// Singleton:
// 단일 객체 패턴을 구현하기 위한 변수

private static BookingMapper uniqueInstance ;
public static BookingMapper getInstance()

// uniqueInstance 변수가 null인 경우에만 새로운 BookingMapper 인스턴스를 생성
// 이후 호출된 메서드들은 기존 인스턴스 반환

----------------------------------------------------------
getBookings 메서드 :
//  날짜(date)에 해당하는 예약 및 워크인 정보를 가져옴

 - oid : 예약의 고유 식별자
 - covers : 예약의 인원 수
 - bdate : 예약 날짜
 - btime : 예약 시간
 - table : 예약된 테이블의 고유 식별자
 - cust : 예약한 고객의 고유 식별자
 - atime : 도착 시간
  //도착 시간이 없을 경우 NULL 값이 저장

----------------------------------------------------------
createReservation 메서드 :

// 예약을 생성하고 반환

 performUpdate 메서드 호출:
 // Reservation 테이블에 예약 정보를 삽입
  - oid: 예약의 고유 식별자
  - covers: 예약 인원 수
  - date: 예약 날짜
  - time: 예약 시간
  - ((PersistentTable) table).getId(): 예약된 테이블의 고유 식별자
  - ((PersistentCustomer) customer).getId(): 예약한 고객의 고유 식별자
  - arrivalTime: 도착 시간 (NULL 값일 경우 "NULL"로 처리됨)

 PersistentReservation 객체 반환 :
  // 예약 정보 반환

----------------------------------------------------------
createWalkIn 메서드 :

// WalkIn 예약을 생성하고 반환

 -int oid: WalkIn 예약의 고유 식별자
  performUpdate 메서드 호출:
   // WalkIn 테이블에 예약 정보를 삽입
   // 각 값은 해당하는 열에 대응

  - oid: WalkIn 예약의 고유 식별자
  - covers: 예약 인원 수
  - date: 예약 날짜
  - time: 예약 시간
  - ((PersistentTable) table).getId(): 예약된 테이블의 고유 식별자

  PersistentWalkIn 객체 반환 :
   // WalkIn 예약 정보 반환

----------------------------------------------------------
updateBooking 메서드 :

// 예약 정보를 업데이트
// 해당 예약이 Reservation인지 WalkIn인지에 따라 테이블을 업데이트

 -boolean isReservation:
 // Reservation인 경우 true, WalkIn인 경우 false를 저장

 // SQL 쿼리 작성:
  // 업데이트할 테이블을 결정하기 위해 isReservation을 사용
   - covers: 예약 인원 수
   - date: 예약 날짜
   - time: 예약 시간
   - table_id: 예약된 테이블의 고유 식별자

 예약이 Reservation인 경우:
 // 추가적으로 customer_id와 arrivalTime을 업데이트
  - customer_id: 예약한 고객의 고유 식별자
  - arrivalTime: 도착 시간
  // arrivalTime이 null인 경우 "NULL"을, 그렇지 않은 경우 해당 시간 값을 추가

----------------------------------------------------------
deleteBooking 메서드 :

// 예약 정보를 삭제
// 해당 예약이 Reservation인지 WalkIn인지에 따라 테이블에서 삭제

 - table:
 // Booking 객체가 Reservation인지 WalkIn인지 확인하여 삭제할 테이블을 결정
 // Reservation인 경우 "Reservation", WalkIn인 경우 "WalkIn"을 저장

 performUpdate 메서드 호출:
 // 해당 테이블에서 oid를 기준으로 예약 정보를 삭제
 // PersistentBooking으로 형변환하여 해당 객체의 getId 메서드를 사용

----------------------------------------------------------
performUpdate 메서드 : 
// 데이터베이스의 업데이트 

========================================================================
CustomerMapper.java

getFromCache 메서드 :

// 캐시에서 특정 oid에 해당하는 PersistentCustomer 객체를 가져옴
// 지정된 oid에 해당하는 PersistentCustomer 객체 반환
- oid: 가져올 PersistentCustomer 객체의 고유 식별자
----------------------------------------------------------
getFromCacheByDetails 메서드 : 

// 캐시에서 이름과 전화번호로 PersistentCustomer 객체를 가져옴
// 지정된 이름과 전화번호에 해당하는 PersistentCustomer 객체 반환
- name: 가져올 PersistentCustomer 객체의 이름
- phone: 가져올 PersistentCustomer 객체의 전화번호
----------------------------------------------------------
addToCache 메서드 : 

// 캐시에 PersistentCustomer 객체를 추가
- c: 추가할 PersistentCustomer 객체

----------------------------------------------------------
CustomerMapper 생성자 : 
// 캐시를 초기화

----------------------------------------------------------
//Singletone

getInstance 메서드 :

// CustomerMapper의 유일한 인스턴스를 반환

----------------------------------------------------------
getCustomer 메서드 :

// 이름과 전화번호를 기반으로 캐시에서 PersistentCustomer를 조회
// 만약 캐시에 없을 경우, 데이터베이스에서 조회
// 데이터베이스에서도 없을 경우 새로운 PersistentCustomer를 생성
// 생성된 객체를 캐시에 추가
 - n: 이름
 - p: 전화번호
// 조회된 또는 생성된 PersistentCustomer 객체 반환

----------------------------------------------------------
getCustomerForOid 메서드 :

// oid를 기반으로 캐시에서 PersistentCustomer를 조회
// 만약 캐시에 없을 경우, 데이터베이스에서 조회합
// 조회된 객체를 캐시에 추가
 - oid: 객체 식별자
// 조회된 PersistentCustomer 객체 반환

----------------------------------------------------------
createCustomer 메서드 : 
// 데이터베이스에 고객을 추가
// 캐시에 동일한 이름과 전화번호를 가진 PersistentCustomer 객체가 있는지 확인
// 만약 캐시에 없을 경우, 데이터베이스에 새로운 고객 정보를 삽입
  - name: 이름
  - phone: 전화번호
//  조회된 또는 생성된 PersistentCustomer 객체 반환

----------------------------------------------------------
getCustomer 메서드 : 

// 데이터베이스에서 고객 정보를 조회
// SQL 문을 실행하여 결과를 가져옴
// 결과로부터 PersistentCustomer 객체를 생성하여 반환

========================================================================
PersistentBooking.java

PersistentBooking 인터페이스 :

// getId() 메서드를 제공하여 영속적인 예약에 연관된 예약 ID를 검색

========================================================================
PersistentCustomer.java

//PersistentCustomer 객체는 고객의 ID (oid)와 이름 (n), 전화번호 (p)를 갖고 생성

getId() 메서드:

 //고객의 ID를 반환

========================================================================
PersistentReservation.java

- id : 예약 ID
- c : 예약 인원 수
- d : 예약 날짜
- t : 예약 시간
- tab : 예약 테이블
- cust : 예약 고객
- arr : 도착 시간

getId() 메서드 : 

//예약 ID 반환

========================================================================
PersistentTable.java

- id : 예약 테이블의 ID
- n : 테이블 번호
- c : 테이블 수용 인원

getId() 메서드:

// 예약 테이블의 ID 반환

========================================================================
PersistentWalkIn.java

- id : WalkIn 예약의 ID
- c : 예약 인원 수
- d : 예약 날짜
- t : 예약 시간
- tab : 예약 테이블

getId() 메서드 : 

// WalkIn 예약의 ID 반환

========================================================================
TableMapper.java

getFromCache() 메서드 : 

// ID에 해당하는 PersistentTable을 캐시에서 반환

----------------------------------------------------------
getFromCacheByNumber() 메서드 :

// 테이블 번호에 해당하는 PersistentTable을 캐시에서 반환

----------------------------------------------------------
addToCache() 메서드 :

// PersistentTable을 캐시에 추가

----------------------------------------------------------
getInstance() 메서드 : 

// TableMapper의 싱글톤 인스턴스를 반환

----------------------------------------------------------
getTable() 메서드 : 

// 지정된 테이블 번호에 해당하는 PersistentTable 객체를 반환, 없을 경우 null 반환
// 먼저 캐시에서 테이블을 찾고, 캐시에 존재하지 않을 경우 데이터베이스에서 조회
// 조회된 테이블이 캐시에 추가

- tno : 테이블 번호

----------------------------------------------------------
getTableForOid() 메서드 : 

// 지정된 OID에 해당하는 PersistentTable 객체를 반환, 없을 경우 null 반환
// 먼저 캐시에서 테이블을 찾고, 캐시에 존재하지 않을 경우 데이터베이스에서 조회
// 조회된 테이블이 캐시에 추가

----------------------------------------------------------
getTableNumbers 메서드 : 

// 모든 테이블 번호를 포함하는 Vector를 반환
// 데이터베이스에서 `Table` 테이블을 조회하여 테이블 번호를 오름차순으로 정렬한 후,
   각 번호를 Integer 객체로 변환하여 Vector에 추가